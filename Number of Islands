class Solution:
    
  def numIslands(self, grid: List[List[str]]) -> int:
    rows, cols = len(grid), len(grid[0])
    num_of_islands = 0
    visit_set = set()
    
    def bfs(r, c):
      q = deque()
      visit_set.add((r, c))
      q.append((r, c))
      
    
        
      while q:
        row, col = q.popleft()
        directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]
        for direc_row, direc_col in directions:
          r, c = row + direc_row, col + direc_col
          if (r in range(rows) and 
             c in range(cols)  and 
              grid[r][c] == "1" and 
              (r, c) not in visit_set):
                q.append((r, c))
                visit_set.add((r, c))
    for r in range(rows):
      for c in range(cols):
        if grid[r][c] == "1" and (r, c) not in visit_set:
          bfs(r, c)
          num_of_islands += 1
    return num_of_islands
        
