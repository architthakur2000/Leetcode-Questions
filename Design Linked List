public class ListNode{
    
    int val;
    ListNode prev, next;
    ListNode(int x) {val = x;}
  }

class MyLinkedList {
    int size;
    ListNode head;
    ListNode tail;
    public MyLinkedList() {
        size = 0;
        head = new ListNode(0);
        tail = new ListNode(0);
        head.next = tail;
        tail.prev = head;
    }

public int get(int index) {
    if (index < 0 || index >= size) return -1;
    ListNode curr = head;
    for (int i=0; i<=index; i++){
        curr = curr.next;
    }
    return curr.val;
}

public void addAtHead(int val) {
    addAtIndex(0, val);
}

public void addAtTail(int val) {
    addAtIndex(size, val);
}

public void addAtIndex(int index, int val) {
    if (index > size) return;
    if (index < 0) index = 0;
    
    ListNode curr = head;
    for (int i=0; i<index; i++){
        curr = curr.next;
    }
    ListNode newNode = new ListNode(val);
    newNode.next = curr.next;
    curr.next = newNode;
    size++; // will increase the size of the linkedlist after adding the node to the linkedlist. 
}

public void deleteAtIndex(int index) {
    if (index < 0 || index >= size) return;
    ListNode curr = head;
    for (int i=0; i<index; i++){
        curr = curr.next;
    }
    curr.next = curr.next.next;
    curr.next.prev = curr; // this is just to avoid the null value making troubles. 
    
    size--;
}
}
